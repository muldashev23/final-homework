// <auto-generated />
using Backend.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Backend.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231003130853_Role")]
    partial class Role
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Backend.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("bytea");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@gmail.com",
                            PasswordHash = new byte[] { 127, 1, 76, 202, 133, 84, 181, 12, 232, 117, 25, 236, 240, 237, 234, 3, 165, 66, 247, 83, 41, 172, 216, 69, 251, 21, 212, 230, 220, 46, 56, 143, 170, 130, 59, 131, 218, 161, 2, 208, 250, 179, 41, 227, 117, 171, 252, 127, 26, 187, 21, 19, 13, 205, 228, 140, 230, 136, 97, 204, 4, 42, 106, 177 },
                            PasswordSalt = new byte[] { 237, 174, 128, 229, 153, 84, 222, 56, 220, 18, 160, 3, 60, 141, 69, 111, 143, 99, 104, 147, 133, 83, 150, 187, 148, 159, 113, 234, 60, 19, 116, 229, 38, 78, 27, 254, 149, 165, 17, 146, 125, 2, 96, 128, 130, 234, 120, 18, 246, 37, 20, 139, 143, 177, 66, 30, 56, 170, 230, 154, 137, 96, 208, 223, 135, 181, 158, 136, 139, 57, 9, 28, 44, 238, 198, 13, 226, 95, 41, 207, 89, 92, 197, 137, 51, 194, 30, 184, 84, 231, 207, 42, 30, 99, 23, 108, 113, 164, 94, 219, 200, 172, 55, 127, 212, 112, 147, 82, 249, 8, 232, 143, 3, 106, 114, 100, 253, 151, 21, 110, 64, 80, 73, 30, 175, 250, 168, 233 },
                            Role = "Admin",
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Backend.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Backend.Entities.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsMain")
                        .HasColumnType("boolean");

                    b.Property<string>("PublicId")
                        .HasColumnType("text");

                    b.Property<int>("ShoesID")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ShoesID");

                    b.ToTable("Photos");
                });

            modelBuilder.Entity("Backend.Entities.SelectedSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CartId")
                        .HasColumnType("integer");

                    b.Property<int>("SelectedShoesId")
                        .HasColumnType("integer");

                    b.Property<int>("ShoesIdForSize")
                        .HasColumnType("integer");

                    b.Property<int>("SizeNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.ToTable("SelcetedSizes");
                });

            modelBuilder.Entity("Backend.Entities.Shoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Available")
                        .HasColumnType("integer");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsForMan")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("Price")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.ToTable("Shoes");
                });

            modelBuilder.Entity("Backend.Entities.Size", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("ShoesID")
                        .HasColumnType("integer");

                    b.Property<int>("SizeNum")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ShoesID");

                    b.ToTable("Sizes");
                });

            modelBuilder.Entity("CartShoes", b =>
                {
                    b.Property<int>("CartsId")
                        .HasColumnType("integer");

                    b.Property<int>("ShoesId")
                        .HasColumnType("integer");

                    b.HasKey("CartsId", "ShoesId");

                    b.HasIndex("ShoesId");

                    b.ToTable("CartShoes");
                });

            modelBuilder.Entity("Backend.Entities.Cart", b =>
                {
                    b.HasOne("Backend.Entities.AppUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("Backend.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Backend.Entities.Photo", b =>
                {
                    b.HasOne("Backend.Entities.Shoes", "Shoes")
                        .WithMany("Photos")
                        .HasForeignKey("ShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("Backend.Entities.SelectedSize", b =>
                {
                    b.HasOne("Backend.Entities.Cart", "Cart")
                        .WithMany("SelectedSizes")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Backend.Entities.Size", b =>
                {
                    b.HasOne("Backend.Entities.Shoes", "Shoes")
                        .WithMany("Sizes")
                        .HasForeignKey("ShoesID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shoes");
                });

            modelBuilder.Entity("CartShoes", b =>
                {
                    b.HasOne("Backend.Entities.Cart", null)
                        .WithMany()
                        .HasForeignKey("CartsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Backend.Entities.Shoes", null)
                        .WithMany()
                        .HasForeignKey("ShoesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Backend.Entities.AppUser", b =>
                {
                    b.Navigation("Cart");
                });

            modelBuilder.Entity("Backend.Entities.Cart", b =>
                {
                    b.Navigation("SelectedSizes");
                });

            modelBuilder.Entity("Backend.Entities.Shoes", b =>
                {
                    b.Navigation("Photos");

                    b.Navigation("Sizes");
                });
#pragma warning restore 612, 618
        }
    }
}
